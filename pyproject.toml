[tool.poetry]
name = "portia-sdk-python"
version = "0.0.1-alpha.1"
description = "Portia Labs Python SDK for building agentic workflows."
authors = ["Tech <tech@portialabs.ai>"]
readme = "README.md"
repository = "https://pypi.org/TomPortia/portia-sdk-python/"
homepage = "https://www.portialabs.ai/"
packages = [
  {include = "portia"}
]
documentation = "https://www.portialabs.ai/docs"
keywords = ["LLM", "agentic", "workflow"]
classifiers = [
    "Development Status :: 3 - Alpha"
]

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.10.3"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
ruff = "^0.8.0"
pytest = ">=8.3.3"
pytest-rerunfailures = "^14.0"
pytest-cov = "^5.0.0"
pyright = "^1.1.382"
pytest-httpx = "^0.33.0"

[tool.ruff]
line-length=100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "D203",    # Disables checks for having a blank line before a class docstring. We instead have no-blank-line-before-class (D211) enabled.
  "D213",    # Disables checks for multi-line docstrings not starting on the first line. We instead have multi-line-summary-first-line (D212) enabled.
  "EM101",   # Disables checks for missing exception message arguments. We prefer single-line exception statements for simplicity and terseness.
  "EM102",   # Disables checks for f-string usage in exception messages. We prefer single-line exception statements with f-strings for simplicity and terseness.
]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = [
  "S101",    # Disables check for asserts. Asserts in test cases can be useful.
  "PLR2004", # Disables magic number checks. Its normal to assert using magic numbers for things like array length.
]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
  "pydantic.BaseModel", # Tells ruff that BaseModel instances need to be evaluated at runtime.
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"